This is the initial code of the tmp_create_bullet function.  Here we are investigating the very basic use of a local struct in a function.

We found that we needed to declare all our struct members as local vars otherwise they would be treated as instance vars of the object calling the function.

	// struct members
	var d,s,g,xd,yd, m, _x, _y, sg;
	
This is an misunderstanding of how scope works in GM because we delare the struct with the var keyword making it local.  

		var mystruct = 
		{
			// struct members
		}
		
This was first observed by GM's color coding.  Under GM > Preferences > Text Editors > Code Editors > Object Variables is set to a shade of purple.
This was the color of all our struct members.  Object Varialbes must be the same as Instance Variables because we can't find the phrase "Object Variables"
in the manual.

If we do not declare them locally then the program crashes and we get an error message declaring that a struct member was not set before usage.

After we solved our local variable declaration problem we found that we could not read a struct member that has a function as a value.  To solve this
we created simple test cases and investigated the output.

The test cases and results follow.

TEST CASES:
We introduced a struct member, m, for our test cases.  If we ignore comments in our struct then our test struct is as follows:

	var mystruct = 
	{
		d : _dir,
		s : [16,12,0,7,7],
		g : _gun_type + 1,
	   sg : function() { return s[g];},
	   _x : x,
	   _y : y,
	   xd : function() { return _x + lengthdir_x(s[g], d);},
	   yd : function() { return _y + lengthdir_y(s[g], d);},
	   
		m : function() {return _x + lengthdir_x(s[g], d);}
	};
	
To run our tests we modified the value of m and printed the result to the console using show_debug_message.
We number our test cases with the notation [n] where n = 1, 2, 3, ...
The phrase "proper value within the larger context of the statement" means that the output values are determined by the game world parameters when executed.

Test cases [1] and [2] demonstrate the basic principle of using a function in a struct.

	[1]	m : function(){ return 1 + 1;}   show_debug_message(mystruct.m);  // FAIL - we found we needed the () operator to execute the function.
	
	[2] m : function(){ return 1 + 1;}   show_debug_message(mystruct.m());  // SUCCESS  - prints 2 to the console.

Test cases [3], [4] and [5] demonstrate that a function can reference struct members if the are defined.  We do not need to pass them,they are already scoped to the function.

	[3] m : function(){ return d;}   show_debug_message(mystruct.m());  // SUCCESS  - prints 0 to the console (the proper value within the larger context of the statement).

	[4] m : function(){ return s[g];}   show_debug_message(mystruct.m());  // SUCCESS  - prints 16 or 7 to the console (the proper value within the larger context of the statement).

	[5] m : function(){ return s[g] + d;}   show_debug_message(mystruct.m());  // SUCCESS  - prints 16 or 7 to the console (the proper value within the larger context of the statement).
	
Test cases [6], [7] and [8] demonstrate that Instance Variables must be declared as struct members before they are used in a function, i.e. must be scoped into the struct first.

	[6] m : function(){ return x + s[g] + d;}   show_debug_message(mystruct.m());  // FAIL  - we cannot reference an instance var in a formula.
	
	
	[7] _x : x;
		 m : function(){ return _x + s[g] + d;}   show_debug_message(mystruct.m());  // SUCCESS  - prints proper value within the larger context of the statement.
		 
	[8] _x : x;
		 m : function(){ return _x + lengthdir_x(s[g],d);}   show_debug_message(mystruct.m());  // SUCCESS  - prints proper value within the larger context of the statement.
		 
At this point we have all the information we need to use a struct in our function and a function in our struct! 



****START*CODE*BELOW*************************************************************
/// @function create_bullet
/// @description Create bullet(s) when the space key is pressed
/// @arg direction
/// @arg speed
/// @arg faction

function tmp_create_bullet(_dir, _spd, _fac, _gun_type = -1)
{

	audio_play_sound(snd_zap, 1, false);
	// whatever object is calling this function that will be the scope of the object ID
	// and hence the "creator".
	//var _creator = id;
	
	//show_debug_message(string( _gun_type));
	
	
	/***This may be a BUG!***/
	// If we do not declare the variables used in the struct as local then they will be at the instance level of the object 
	// instance referenceing the function.  Because, what if want to add a variable to the struct?
	// We would have to declare it first then add it:
	// var newvar;
	// bullet_struct.newvar = some_value;
	
	// struct members
	var d,s,g,xd,yd, m, _x, _y, sg;
	
	var mystruct = 
	{
		d : _dir,
		s : [16,12,0,7,7],
		g : _gun_type + 1,
	   sg : function() { return s[g];},
	   _x : x,
	   _y : y,
	   xd : function() { return _x + lengthdir_x(s[g], d);},
	   yd : function() { return _y + lengthdir_y(s[g], d);},
	   
		//m : function() {return _x + lengthdir_x(s[g], d);}

	   //xd : function(s,g,d) 
		//	{ 
		//		return x + lengthdir_x(s[g], d);
		//	},
	   //yd : function(s,g,d) 
		//	{ 
		//		 return y + lengthdir_y(s[g], d);
		//	}
	};
	
		//var tmp = typeof( mystruct.xd() ;
	//show_debug_message( mystruct.sg());


	
	var _sep, xx, yy, bullet_angle, inst, i;
	

	// Choose Gun Type
	switch _gun_type
	{
		case powerups.three_bullets:
		
			_sep = 0;
			xx = x + lengthdir_x(_sep, _dir);
			yy = y + lengthdir_y(_sep, _dir);

			inst = instance_create_layer(xx, yy, "Instances", obj_bullet);
			initialize_bullet(_dir, _spd, _fac, inst);
	
		case powerups.two_bullets:
			
			_sep = 12;
			xx = x + lengthdir_x(_sep, _dir + 90);
			yy = y + lengthdir_y(_sep, _dir + 90);
			
			inst = instance_create_layer(xx, yy, "Instances", obj_bullet);
			initialize_bullet(_dir, _spd, _fac, inst);
			
			xx = x + lengthdir_x(_sep, _dir - 90);
			yy = y + lengthdir_y(_sep, _dir - 90);
			
			inst = instance_create_layer(xx, yy, "Instances", obj_bullet);
			initialize_bullet(_dir, _spd, _fac, inst);
		break;
		
		case powerups.four_bullets:
			
			_sep = 7;
			
			var i = 0; repeat(4)
			{
				bullet_angle = _dir + (i * 90);
				xx = x + lengthdir_x(_sep, bullet_angle)
				yy = y + lengthdir_y(_sep, bullet_angle);
				
				inst = instance_create_layer(xx, yy, "Instances", obj_bullet);
				initialize_bullet(bullet_angle, _spd, _fac, inst);
				i += 1;
			}
		break;
		
		case powerups.star_bullets:
			
			_sep = 7;
			
			i = 0; repeat(8)
			{
				//bullet_angle = _dir + (i * 45);
				//xx = x + lengthdir_x(_sep, bullet_angle);
				//yy = y + lengthdir_y(_sep, bullet_angle);
				
				xx = x + lengthdir_x(_sep, _dir + (i * 45));
				yy = y + lengthdir_y(_sep, _dir + (i * 45));
				
				inst = instance_create_layer(xx, yy, "Instances", obj_bullet);
				//initialize_bullet(bullet_angle, _spd, _fac, inst);
				initialize_bullet( _dir + (i * 45), _spd, _fac, inst);
				i += 1;
			}
		break;
		
		case powerups.laser_cannon:
		break;
		
		// the default can also be case -1:
		// but it makes sense to put this as the default 
		default:
		
			//_sep = 16;
			//xx = x + lengthdir_x(_sep, _dir);
			//yy = y + lengthdir_y(_sep, _dir);
		
			//inst = instance_create_layer(xx, yy, "Instances", obj_bullet);
			inst = instance_create_layer(mystruct.xd(), mystruct.yd(), "Instances", obj_bullet);
			initialize_bullet(_dir, _spd, _fac, inst);

		break;
	}

	delete mystruct;

}

